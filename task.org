You have been tasked with designing a scalable and fault-tolerant

social media platform that allows users to create and share posts.

The platform should be able to handle a large number of concurrent
users and support real-time notifications and messaging.

notification queues
notifications in db

You will use a combination of MongoDB, Redis, Nginx Load Balancer, and
queuing technologies like Kafka and RabbitMQ or Redis to implement
this platform.

* Requirements

Your solution should include the following components:
- [X] A MongoDB database to store information about the system.
- [ ] A Redis cache to store frequently accessed data and improve performance.
- An Nginx Load Balancer to distribute incoming requests to multiple
  servers and improve availability.
- A messaging system using Kafka or RabbitMQ to handle real-time
  notifications and messaging between users.

** My plans
- Requests will go to a backend
  - We will notifications per user will be sent to Rabbitmq
    - one queue per user
  - A thread will be used for checking notifications
- Use Redis for caching

- Push notifications
  - create a client script.
  - Each time this script is run
  - It will simulate a user being connected to the server.
  - To implement this functionality, consider defining different types
    of notifications (e.g., friend requests, new posts on the feed),
    and allowing users to select which types of notifications they
    wish to receive.
  - Each notification type can have a corresponding queue, and
    subscribers to that queue will receive notifications of that type.
    
# Your document-based database should include the following components:

# - Ability to store information about users, including their name,
#   username, email, password, date of birth, and list of friends.
# - Ability to store information about posts, including their title,
#   content, author, date of creation, and number of likes and comments.
# - Ability to store information about comments, including their
#   content, author, date of creation, and number of likes.
# - Ability to track notifications for users, including notifications
#   for new posts, comments, and likes.
# - Ability to generate reports on user activity, including posts
#   created, comments created, and likes given and received.

  
# Ability to store information about users
- [X] name,
- [X] username,
- [X] email,
- [ ] password,
- [X] date of birth,
- [X] list of friends.

# Ability to store information about posts including their
- [X] title,
- [X] content,
- [X] author,
- [X] date of creation,
- [X] and number of likes and comments.

# Ability to store information about comments, including their
- [X] content,
- [X] author,
- [X] date of creation,
- [X] and number of likes.

# Ability to track notifications for users, including
- [X] notifications for new posts,
- [X] comments,
- [ ] and likes.

** TODO Scripts to populate the database with sample data for testing and generate sample reports on user activity. (5 points)(O2)
# Ability to generate reports on user activity, including
posts created,
comments created,
likes given and received.

** TODO Scripts to perform basic CRUD operations on the database, including creating, reading, updating, and deleting records. (5 points)(O6)
  
* Considerations
- Your solution should be containerized using Docker, and you should
  provide a workable Docker Compose file for easy setup and
  deployment.
- Submit your complete project as a zip file, including all source
  code, configuration files, Docker files, and documentation.
- Learning outcome mapping for each question is mentioned in front of each.

* Graded Tasks (70 points):
1. A MongoDB database to store information about users, posts,
   comments, and notifications. (15 points)( O6)
2. A Redis cache to store frequently accessed data and improve
   performance. (15 points)(O6)
3. An Nginx Load Balancer to distribute incoming requests to multiple
   servers and improve availability. (15 points)(O6)
4. A messaging system using Kafka, RabbitMQ, or Redis to handle
   real-time notifications and messaging between users. (15 points)(O5)
5. Scripts to populate the database with sample data for testing and
   generate sample reports on user activity. (5 points)(O2)
6. Scripts to perform basic CRUD operations on the database, including
   creating, reading, updating, and deleting records. (5 points)(O6)
